package chapter2.item1;

public class staticFactoryMethod {
    public static void main(String[] args) {
        /*
        장점 1: 정적 팩토리 메서드는 이름을 가질 수 있다. 이름을 통해 생성자보다 직관적인 이해가 가능하다.
        장점 2: 호출될 때 마다 인스턴스를 새로 생성하지 않아도 된다. 반복되는 요청에 같은 객체를 반환하는
               것을 클래스를 인스턴스 통제 클래스라고 한다. 싱글턴, 불변 값 클래스, 플라이웨이트 패턴의
               근간이 된다.
        장점 3: 반환 타입의 하위 타입 객체를 반환할 수 있다. 클라이언트는 객체를 구현클래스가 아닌
               인터페이스로 다룰수 있게 된다.
        장점 4: 입력 매게변수에 따라 다른 클래스의 객체를 반환할 수 있다.
        장점 5: 정적 팩토리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.

        단점 1: 상속을 할 때 public/protected 생성자가 필요하므로, 정적 팩토리 메서드 만으로는
               하위 클래스를 만들 수 없다.
        단점 2: 정적 팩토리 메서드는 프로그래머가 찾기 어렵다.
         */
    }
}
